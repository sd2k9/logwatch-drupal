#!/usr/bin/perl
# Copyright 2012 by Robert Lange <robert.lange@s1999.tu-chemnitz.de>
# Inspired by script "dpkg", Copyright 2006 by Willi Mann <willi@wm1.at>
#                and "sshd", Copyright (c) 2008 Kirk Bauer
###########################################################################
# $Id$
###########################################################################
# $Log$
#
###########################################################################

########################################################
## Copyright 2012 by Robert Lange <robert.lange@s1999.tu-chemnitz.de>
## Inspired by script "dpkg", Copyright 2008 by Willi Mann <willi@wm1.at>
##                and "sshd", Copyright (c) 2008 Kirk Bauer
## Covered under the included MIT/X-Consortium License:
##    http://www.opensource.org/licenses/mit-license.php
## And in parallel under GNU Public License
#########################################################

use strict;
# Needed? use Logwatch ':all';

my $Debug = $ENV{'LOGWATCH_DEBUG'} || 0;
# Not used, see sshd my $Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;

# Each variable is separated by website
my %install = ();
my %enable  = ();
my %disable = ();
my %unknown = ();
my %php     = ();
my %content = ();
# This dummy hash just keeps track about all possible sites
my %avlsites = ();


# Parser variables - correspondent to following drupal log format specifiers
my $line;
my $site;        # !base_url
my $timestamp;   # !timestamp
my $cat;         # !type - Category
my $ip;          # !ip
my $requri;      # !request_uri
my $uid;         # !uid
my $msg;         # !message



if ( $Debug >= 5 ) {
	print STDERR "\n\nDEBUG: Inside drupal Filter \n\n";
}

while(my $line=<STDIN>) {
    if ( $Debug >= 5 ) {
	print STDERR "DEBUG: Verbatim log line: $line";
    }
    chomp $line;
    ## if ( # Matches to ignore
    ## 	($line =~ /^pam_succeed_if: requirement "uid < 100" (not|was) met by user /) or
    ##     # ...
    ## ) {
    ## } elsif
    # *** Break down the log entry into pieces
    ($site, $timestamp, $cat, $ip, $requri, $uid, $msg) = 
	( $line =~ /^([^|]+)\|(\d+)\|([\w\d\s]+)\|([\d\.]+)\|(.+)\|.*\|(\d+)\|(?:[^|]*)\|(.+)$/);
    if (not $msg ) {  # Parsing failed
	print STDERR "ERROR: Failed to break down drupal log: $line\n";
	print STDERR "ERROR: Did you configured the log format correctly?\n";
	# Detailed Debug
	# print STDERR "DBG $line\n$site\n$timestamp\n$cat\n$ip\n$requri\n$uid\n$msg\n\n";
	exit(1);
    }
    $avlsites{$site} = 1;

    # *** First of all, System actions
    if ($cat eq "system" ) {
	# *** Module Management: Install, Enable, Disable
	# Templates:
	# \d+|system|10.0.2.2|http://website.org:8080/admin/modules/list/confirm?render=overlay|http://website.org:8080/admin/modules?render=overlay|1||syslog module installed.
	# \d+|system|10.0.2.2|http://website.org:8080/admin/modules/list/confirm?render=overlay|http://website.org:8080/admin/modules?render=overlay|1||syslog module enabled.
	# \d+|system|10.0.2.2|http://website.org:8080/admin/modules/list/confirm?render=overlay|http://website.org:8080/admin/modules?render=overlay|1||dblog module disabled.
	# Split down the log message into module and action
	if ( my ( $module, $action) = ( $msg =~ /^(\w+) module (disabled|enabled|installed).$/ ) ) {
	    if ($action eq "installed") {
		push @{$install{$site} }, $module;
	    } elsif ($action eq "enabled") {
		push @{$enable{$site} }, $module;
	    } elsif ($action eq "disabled") {
		push @{$disable{$site} }, $module;
	    } else {
		# Assert; this line cannot be reached
		print STDERR "ERROR: Failure in Module management extraction for line \"$line\". This is a bug in the logwatch drupal script.";
	    }
	} else {  # Unknown action
	    # This we don't know at all
	    push @{ $unknown{$site} }, "Unknow system action: $msg";
	}

    # *** Now take care about php messages
    } elsif ( $cat eq "php" ) {
	# Template:
	# https://website.org:8443|\d+|php|10.0.2.2|https://website.org:8443/en/admin/structure/views/view/calendar/edit/calendar_1/ajax|https://website.org:8443/en/admin/structure/views/view/calendar/edit/calendar_1|3||Notice: Undefined property: date_views_argument_handler_simple::$argument in calendar_plugin_style->query() (line 129 of /home/drupal/drupal7/sites/all/modules/calendar/includes/calendar_plugin_style.inc).
	push @{$php{$site} }, $msg;

    # *** And now let's go for content modification
    } elsif ( $cat eq "content" ) {
	# Template:
        # https://website.org:8443|\d+|content|10.0.2.2|https://website.org:8443/en/node/add/page|https://website.org:8443/en/node/add/page|3|view|page: added Folgen.
        # http://website.org:8080|\d+|content|10.0.2.2|http://website.org:8080/node/1/edit|http://website.org:8080/node/1/edit|2|view|page: updated Impressum.
        # https://website.org:8443|\d+|content|10.0.2.2|https://website.org:8443/en/node/10/revisions/11/delete|https://website.org:8443/en/node/10/revisions/11/delete|3||image_container: deleted User Pictures revision 11.
        # https://website.org:8443|\d+|content|10.0.2.2|https://website.org:8443/en/node/32/delete|https://website.org:8443/en/node/32/delete|3||page: deleted Folgen.
        # https://website.org:8443|\d+|content|10.0.2.2|https://website.org:8443/en/admin/content|https://website.org:8443/en/admin/content|3||Deleted 13 posts.
        # First simple approach: Just take every line as-is; no further sorting done
	push @{$content{$site} }, $msg;

    # *** Everything else goes here
    } else {
	# This we don't know at all
	push @{ $unknown{$site} }, $line;
    }
}


# ** Output collected information
foreach $site (keys %avlsites) {
    # For each site
    print $site . "\n*************\n\n";

    my @k = ( "Modules Installed" , \@install{$site},
	      "Modules Enabled"   , \@enable{$site},
	      "Modules Disabled"  , \@disable{$site},
	      "PHP Messages"      , \@php{$site},
	      "Content Changes"   , \@content{$site},
	      "Unmatched Entries" , \@unknown{$site} );

    while (@k > 0) {
	my $text = shift @k;
	my $array = shift @k;
	if(@$array) {
		print "\n$text:\n";
		foreach my $line (sort @$array) {
			print "   $line\n";
		}

	}
    }
}


